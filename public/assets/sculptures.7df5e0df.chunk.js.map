{"version":3,"sources":["/Users/marioncasters/Sites/GIT/marioncasters-site/src/data/graphql/queries/getAllItems.graphql","webpack:///./src/routes/sculpturesPage/SculpturesPage.css?238e","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/SculpturesPage.css","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/SculpturesPage.js","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/index.js"],"names":["doc","kind","definitions","operation","name","value","variableDefinitions","variable","type","directives","selectionSet","selections","arguments","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","i","length","element","forEach","def","refs","Set","collectFragmentReferences","node","add","selection","module","exports","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","refName","size","prevRefs","has","childRef","op","push","oneQuery","css","__webpack_require__","insertCss","content","locals","_getContent","_getCss","_insertCss","options","loading","title","SculpturesPage","itemTitle","imagesForItem","concat","ITEM_CONST","SCULPTURE_PATH","React","Component","_this2","this","TYPE","SCULPTURE","_jsx","react_apollo_esm","query","GET_ITEMS_QUERY","variables","ssr","_ref","error","data","className","s","react","props","getAllItems","map","sculpture","Item","item","id","withStyles","_callee","description","regeneratorRuntime","wrap","_context","prev","next","ITEM_CONSTANTS","TITLE","META_HTML_CONSTANTS","META_DESCRIPTION","abrupt","chunks","component","sculpturesPage_jsx","Layout","routes_sculpturesPage_SculpturesPage","stop","action"],"mappings":"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","file":"sculptures.7df5e0df.chunk.js","sourcesContent":["\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllItems\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllItems\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"technique\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"height\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"width\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"length\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":159}};\n    doc.loc.source = {\"body\":\"query getAllItems($type: String!) {\\n  getAllItems(type: $type) {\\n    id\\n    title\\n    date\\n    technique\\n    description\\n    height\\n    width\\n    length\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"getAllItems\"] = oneQuery(doc, \"getAllItems\");\n        \n","\n    var refs = 0;\n    var css = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\");\n    var insertCss = require(\"!../../../node_modules/isomorphic-style-loader/insertCss.js\");\n    var content = typeof css === 'string' ? [[module.id, css, '']] : css;\n\n    exports = module.exports = css.locals || {};\n    exports._getContent = function() { return content; };\n    exports._getCss = function() { return '' + css; };\n    exports._insertCss = function(options) { return insertCss(content, options) };\n\n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\", function() {\n        css = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\");\n        content = typeof css === 'string' ? [[module.id, css, '']] : css;\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"._20th3{height:600px}._jzyv{display:none}\", \"\"]);\n\n// Exports\nexports.locals = {\n\t\"loading\": \"_20th3\",\n\t\"title\": \"_jzyv\"\n};","import React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport withStyles from 'isomorphic-style-loader/withStyles';\nimport PropTypes from 'prop-types';\n\nimport Item from '../../components/ItemDir/Item';\nimport ITEM_CONST from '../../constants/itemConstants';\nimport s from './SculpturesPage.css';\nimport GET_ITEMS_QUERY from '../../data/graphql/queries/getAllItems.graphql';\n\nclass SculpturesPage extends React.Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n  };\n\n  getUrlImages = itemTitle => {\n    const imagesForItem = [];\n    let i = 1;\n    while (i < 5) {\n      imagesForItem.push(`${ITEM_CONST.SCULPTURE_PATH}/${itemTitle}_${i}.jpg`);\n      i++;\n    }\n    return imagesForItem;\n  };\n\n  render() {\n    const type = ITEM_CONST.TYPE.SCULPTURE;\n    return (\n      <Query query={GET_ITEMS_QUERY} variables={{ type }} ssr>\n        {({ loading, error, data }) => {\n          if (loading) return <div className={s.loading}>Chargement...</div>;\n          if (error) return <p>Erreur de chargement : {error}</p>;\n\n          return (\n            <Fragment>\n              <h1 className={s.title}>{this.props.title}</h1>\n              {data.getAllItems.map(sculpture => (\n                <Item key={sculpture.id} item={sculpture} type={type} />\n              ))}\n            </Fragment>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default withStyles(s)(SculpturesPage);\n","import React from 'react';\nimport SculpturesPage from './SculpturesPage';\nimport Layout from '../../components/GeneralLayout/Layout';\nimport ITEM_CONSTANTS from '../../constants/itemConstants';\nimport META_HTML_CONSTANTS from '../../constants/metaHtmlConstants';\n\nasync function action() {\n  const title = ITEM_CONSTANTS.TITLE.SCULPTURE;\n  const description = META_HTML_CONSTANTS.META_DESCRIPTION.SCULPTURE;\n\n  return {\n    title,\n    description,\n    chunks: ['drawings'],\n    component: (\n      <Layout>\n        <SculpturesPage title={title} />\n      </Layout>\n    ),\n  };\n}\n\nexport default action;\n"],"sourceRoot":""}