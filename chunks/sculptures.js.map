{"version":3,"sources":["webpack:///./src/routes/sculpturesPage/SculpturesPage.css?238e","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/SculpturesPage.css","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/SculpturesPage.js","/Users/marioncasters/Sites/GIT/marioncasters-site/src/routes/sculpturesPage/index.js","/Users/marioncasters/Sites/GIT/marioncasters-site/src/data/graphql/queries/getAllItems.graphql"],"names":["css","__webpack_require__","insertCss","content","module","i","exports","locals","_getContent","_getCss","_insertCss","options","push","loading","title","withStyles","s","React","Component","[object Object]","args","super","itemTitle","imagesForItem","ITEM_CONST","SCULPTURE_PATH","this","render","type","TYPE","SCULPTURE","_jsx","external_react_apollo_","query","GET_ITEMS_QUERY","variables","ssr","error","data","className","external_react_","props","getAllItems","map","sculpture","Item","item","id","ITEM_CONSTANTS","TITLE","description","META_HTML_CONSTANTS","META_DESCRIPTION","chunks","component","sculpturesPage_jsx","Root","routes_sculpturesPage_SculpturesPage","action","doc","kind","definitions","operation","name","value","variableDefinitions","variable","directives","selectionSet","selections","arguments","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","length","element","forEach","def","refs","Set","collectFragmentReferences","node","add","selection","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","refName","size","prevRefs","has","childRef","op","oneQuery"],"mappings":"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","file":"chunks/sculptures.js","sourcesContent":["\n    var refs = 0;\n    var css = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\");\n    var insertCss = require(\"!../../../node_modules/isomorphic-style-loader/insertCss.js\");\n    var content = typeof css === 'string' ? [[module.id, css, '']] : css;\n\n    exports = module.exports = css.locals || {};\n    exports._getContent = function() { return content; };\n    exports._getCss = function() { return '' + css; };\n    exports._insertCss = function(options) { return insertCss(content, options) };\n\n    // Hot Module Replacement\n    // https://webpack.github.io/docs/hot-module-replacement\n    // Only activated in browser context\n    if (module.hot && typeof window !== 'undefined' && window.document) {\n      var removeCss = function() {};\n      module.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\", function() {\n        css = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--7-rules-3!../../../node_modules/postcss-loader/src/index.js??ref--7-rules-4!./SculpturesPage.css\");\n        content = typeof css === 'string' ? [[module.id, css, '']] : css;\n        removeCss = insertCss(content, { replace: true });\n      });\n      module.hot.dispose(function() { removeCss(); });\n    }\n  ","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"._20th3{height:800px}._jzyv{display:none}\", \"\"]);\n\n// Exports\nexports.locals = {\n\t\"loading\": \"_20th3\",\n\t\"title\": \"_jzyv\"\n};","import React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport withStyles from 'isomorphic-style-loader/withStyles';\nimport PropTypes from 'prop-types';\n\nimport Item from '../../components/ItemDir/Item';\nimport ITEM_CONST from '../../constants/itemConstants';\nimport s from './SculpturesPage.css';\nimport GET_ITEMS_QUERY from '../../data/graphql/queries/getAllItems.graphql';\n\nclass SculpturesPage extends React.Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n  };\n\n  getUrlImages = itemTitle => {\n    const imagesForItem = [];\n    let i = 1;\n    while (i < 5) {\n      imagesForItem.push(`${ITEM_CONST.SCULPTURE_PATH}/${itemTitle}_${i}.jpg`);\n      i++;\n    }\n    return imagesForItem;\n  };\n\n  render() {\n    const type = ITEM_CONST.TYPE.SCULPTURE;\n    return (\n      <Query query={GET_ITEMS_QUERY} variables={{ type }} ssr>\n        {({ loading, error, data }) => {\n          if (loading) return <div className={s.loading}>Chargement...</div>;\n          if (error) return <p>Erreur de chargement : {error}</p>;\n\n          return (\n            <Fragment>\n              <h1 className={s.title}>{this.props.title}</h1>\n              {data.getAllItems.map(sculpture => (\n                <Item key={sculpture.id} item={sculpture} type={type} />\n              ))}\n            </Fragment>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default withStyles(s)(SculpturesPage);\n","import React from 'react';\nimport SculpturesPage from './SculpturesPage';\nimport ITEM_CONSTANTS from '../../constants/itemConstants';\nimport META_HTML_CONSTANTS from '../../constants/metaHtmlConstants';\nimport Root from '../../components/GeneralLayout/Root';\n\nasync function action() {\n  const title = ITEM_CONSTANTS.TITLE.SCULPTURE;\n  const description = META_HTML_CONSTANTS.META_DESCRIPTION.SCULPTURE;\n\n  return {\n    title,\n    description,\n    chunks: ['drawings'],\n    component: (\n      <Root>\n        <SculpturesPage title={title} />\n      </Root>\n    ),\n  };\n}\n\nexport default action;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllItems\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllItems\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"technique\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"height\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"width\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"length\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":159}};\n    doc.loc.source = {\"body\":\"query getAllItems($type: String!) {\\n  getAllItems(type: $type) {\\n    id\\n    title\\n    date\\n    technique\\n    description\\n    height\\n    width\\n    length\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"getAllItems\"] = oneQuery(doc, \"getAllItems\");\n        \n"],"sourceRoot":""}