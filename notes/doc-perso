// MySQL
---------------------
mysql -u <user> -p



// fetch example
---------------------
login = async e => {
    e.preventDefault();
    const input = this.state;
    await this.context
      .fetch('/graphql', {
        method: 'POST',
        body: JSON.stringify({
          query,
          variables: { input },
        }),
      })
      .then(res => res.json())
      .then(data => (data ? history.push('admin') : history.push('/')))
      // eslint-disable-next-line no-console
      .catch(error => console.log('ERROR', error.message));
  };



// styles :
---------------------
  <div className={s['My-style']}>
  or
  <div className={s.MyStyle}>



// initialize with destructuring object :
---------------------
const { files = [] } = this.state.files;



// setState for array
---------------------
this.setState(prevState => ({
    array: [...prevState.array, newElement]
}));


// Photo import
---------------------
qualitÃ© JPEG : Moyenne
Taille: Grande






const LogoutButton = () => (
  <Mutation
    mutation={LOGOUT_MUTATION}
    update={cache => {
      cache.writeData({
        data: {
          adminStatus: {
            __typename: 'AdminStatus',
            isConnected: false,
          },
        },
      });
    }}
    onCompleted={history.push('/')}
  >
    {({ client, logout }) => (
      <button
        className={s.loginLink}
        onClick={e => {
          e.preventDefault();
          logout().then(() => client.resetStore());
        }}
      >
        Admin Out
      </button>
    )}
  </Mutation>
);


// ssh connexion
---------------------
ssh cama7387@109.234.162.107
cp -R repositories/portfolio-app/build/* app/marioncasters-site/



function importAllImages(r) {
  const images = new Map();
  r.keys().forEach(item => {
    images.set(item.replace('./', ''), r(item));
  });
  return images;
}
